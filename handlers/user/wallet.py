import datetime
import os

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from utils.functions import edit_message, notify_admins
from utils.models import Users, Payments, Withdraws
from utils.keyboards import wallet_kb, amount_wallet_kb, pay_btn, back_btn, choice_type_withdraw
from utils.states import Wallet
from shop_rukassa import Client, BadRequest

wallet_router = Router()


@wallet_router.callback_query(F.data == 'wallet')
async def wallet_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    user: Users = Users.get_or_none(Users.user_id == callback.from_user.id)
    if not user:
        return await edit_message(callback, '–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ /start')
    text = f'''<b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{user.balance}</code></b>
    
üí∞ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å –∏ –≤—ã–≤–æ–¥–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –æ–±—ä–µ–º—É –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–ø–µ—Ä–∞—Ü–∏–π.

<i>‚ÑπÔ∏è –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π:\n<b>üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å</b></i>'''
    await edit_message(callback, text, reply_markup=await wallet_kb(), parse_mode="HTML")


@wallet_router.callback_query(F.data == 'wallet_topup')
async def wallet_topup_handler(callback: CallbackQuery, state: FSMContext):
    await edit_message(callback, '‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é\n'
                                 '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 300 RUB',
                       reply_markup=await amount_wallet_kb('topup'))
    await state.set_state(Wallet.topup_choice)


@wallet_router.callback_query(Wallet.topup_choice, F.data.split()[0] == 'topup')
@wallet_router.message(Wallet.topup_choice)
async def topup_choice_handler(event: Message | CallbackQuery, state: FSMContext):
    amount = None
    if isinstance(event, Message):
        if not event.text.isdigit() or int(event.text) < 300:
            return await edit_message(event, '‚ùå –û—à–∏–±–∫–∞! –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 300\n\n'
                                             '‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é',
                                      reply_markup=await amount_wallet_kb('topup'))
        amount = int(event.text)
    else:
        amount = int(event.data.split()[1])
    await state.clear()
    client = Client(token=os.getenv('RUKASSA_TOKEN'), shop_id=int(os.getenv('RUKASSA_SHOPID')))
    payment = Payments.create(user_id=event.from_user.id, amount=amount, date_time=datetime.datetime.now())
    client_payment = await client.create_payment(payment.id, amount, user_code=str(event.from_user.id))
    await edit_message(event, f'‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{amount}‚ÇΩ</b>\n'
                              f'‚ÑπÔ∏è –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',
                       reply_markup=await pay_btn(client_payment.url), parse_mode="HTML")


@wallet_router.callback_query(F.data == 'wallet_withdraw')
async def wallet_withdraw_handler(callback: CallbackQuery, state: FSMContext):
    user: Users = Users.get_or_none(Users.user_id == callback.from_user.id)
    await edit_message(callback, '‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é\n'
                                 '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 5000 RUB\n'
                                 f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} RUB', reply_markup=await back_btn('wallet'))
    await state.set_state(Wallet.withdraw_choice)


@wallet_router.callback_query(Wallet.withdraw_choice, F.data.split()[0] == 'withdraw')
@wallet_router.message(Wallet.withdraw_choice)
async def withdraw_choice_handler(event: Message | CallbackQuery, state: FSMContext):
    amount = None
    if isinstance(event, Message):
        if not event.text.isdigit() or int(event.text) < 5000:
            return await edit_message(event,
                                      '‚ùå –û—à–∏–±–∫–∞! –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 5000\n\n'
                                      '‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é',
                                      reply_markup=await back_btn('wallet'))
        amount = int(event.text)
    else:
        amount = int(event.data.split()[1])
    user: Users = Users.get_or_none(Users.user_id == event.from_user.id)
    if user.balance < amount:
        return await edit_message(event, '‚ùå –û—à–∏–±–∫–∞! –í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—É–º–º—ã, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ\n\n'
                                         '‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é',
                                  reply_markup=await back_btn('wallet'))
    await state.update_data(user=user, amount=amount)
    await edit_message(event, f'ü§î –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã', reply_markup=await choice_type_withdraw(),
                       parse_mode="HTML")


@wallet_router.callback_query(F.data.split()[0] == 'choice_type_wallet')
async def choice_type_wallet_handler(callback: CallbackQuery, state: FSMContext):
    way = callback.data.split()[1]
    mytype = '—Ç–µ–ª–µ—Ñ–æ–Ω–∞' if way == 'SBP' else '–∫–∞—Ä—Ç—ã'
    await state.update_data(way=way)
    await state.set_state(Wallet.withdraw_wallet)
    await edit_message(callback, f'‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä {mytype}, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:',
                       reply_markup=await back_btn('wallet'), parse_mode="HTML")


@wallet_router.message(Wallet.withdraw_wallet)
async def withdraw_wallet_handler(event: Message, state: FSMContext):
    data = await state.get_data()
    user, amount = data.get('user'), data.get('amount')
    await state.clear()
    client = Client(email=os.getenv('RUKASSA_EMAIL'), password=os.getenv('RUKASSA_PASSWORD'))
    way = data.get('way', 'SBP')
    wallet = event.text
    text = f'''üÜï –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ üÜï
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{event.from_user.username} —Å ID <code>{event.from_user.id}</code> –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã–ø–ª–∞—Ç—É —Å –±–∞–ª–∞–Ω—Å–∞ <i>[{user.balance}‚ÇΩ]</i>
üíµ <b>–°—É–º–º–∞:</b> <i>{amount}‚ÇΩ</i>
üí≥ <b>–°–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:</b> <i>{way}</i>
üî¢ <b>–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:</b> <i>{wallet}</i>'''
    withdraw = Withdraws.create(user_id=event.from_user.id, amount=amount, way=way, wallet=wallet)
    try:
        await client.create_withdraw(way=way, wallet=wallet, amount=amount, order_id=withdraw.id)
    except BadRequest as error:
        withdraw.delete_instance()
        text += f'\n\n‚ùå –û—à–∏–±–∫–∞: {error}'
        await notify_admins(event.bot, text, parse_mode="HTML")
        return await edit_message(event, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —Å—É–º–º—É/–Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞',
                                  reply_markup=await back_btn('wallet'))
    user.balance -= amount
    user.save()
    await edit_message(event, f'‚úÖ –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n'
                              f'–°—É–º–º–∞: <b>{amount}‚ÇΩ</b>\n'
                              f'–°–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞: <b>{way}</b>\n'
                              f'–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: <b>{wallet}</b>',
                       reply_markup=await back_btn('wallet'), parse_mode="HTML")
    text += f'\n\n‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É'
    await notify_admins(event.bot, text, parse_mode="HTML")
