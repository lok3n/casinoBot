import asyncio

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from utils.keyboards import play_with_back, back_btn, again_with_back
from utils.functions import edit_message, send_emoji_win
from utils.models import Users
from utils.messages import win_text, lose_text
from utils.states import Play

dice_router = Router()


@dice_router.callback_query(F.data == 'dice')
async def dice_handler(callback: CallbackQuery, state: FSMContext):
    user: Users = Users.get_or_none(Users.user_id == callback.from_user.id)
    text = '''üé≤ <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏:</b>

–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç –¥–≤–∞ —Å—Ç–∏–∫–µ—Ä–∞ –∫–æ—Å—Ç–∏. –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫—É–±–∏–∫–∞—Ö –≤—ã–ø–∞–¥–∞—é—Ç –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. <b>–ü–æ–±–µ–¥–æ–π –≤ –∏–≥—Ä–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã–ø–∞–¥–µ–Ω–∏–µ "–¥—É–±–ª—è"</b> (–¥–≤—É—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä 6:6). 

–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É: –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, —Ç–∞–∫ –∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É. –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ —Å–Ω–∏–º–∞–µ—Ç—Å—è —Å –±–∞–ª–∞–Ω—Å–∞ –≤ –º–æ–º–µ–Ω—Ç –±—Ä–æ—Å–∫–∞.

<b>–ü—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ –¥—É–±–ª—è - –≤—ã –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ</b> –∏ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞–≤–Ω—ã–µ –≤–∞—à–µ–º—É –≤—ã–∏–≥—Ä—ã—à—É.

üéÅ –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –ê –µ—Å–ª–∏ –æ–¥–µ—Ä–∂–∏—Ç–µ –ø–æ–ø–µ–¥—É –ø—è—Ç—å —Ä–∞–∑ –ø–æ–¥—Ä—è–¥, —Ç–æ –º—ã –∑–∞—á–∏—Å–ª–∏–º 5000 RUB –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.

üî•<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –ø–æ–±–µ–¥—É:</b>

–ï—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç 2Ô∏è‚É£2Ô∏è‚É£Ô∏è, –≤–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>2 —Å—Ç–∞–≤–∫–∏.</b>
–ï—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç 3Ô∏è‚É£3Ô∏è‚É£, –≤–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>3 —Å—Ç–∞–≤–∫–∏.</b>
–ï—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç 4Ô∏è‚É£4Ô∏è‚É£, –≤–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>4 —Å—Ç–∞–≤–∫–∏.</b>
–ï—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç 5Ô∏è‚É£5Ô∏è‚É£, –≤–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>5 —Å—Ç–∞–≤–æ–∫.</b>
–ï—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç 6Ô∏è‚É£6Ô∏è‚É£, –≤–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>6 —Å—Ç–∞–≤–æ–∫.</b>
–ï—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç 1Ô∏è‚É£1Ô∏è‚É£, –≤–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>10 —Å—Ç–∞–≤–æ–∫.</b>

<b>üëáüèª –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:</b>'''
    if not user.balance and not user.free_balance:
        text += '\n\n‚ö†Ô∏è<i><b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å</b></i>'
    else:
        text += '\n\n‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:'
    await edit_message(callback, text, reply_markup=await play_with_back('play_dice', 'start',
                                                                         user.balance, user.free_balance),
                       parse_mode="HTML")
    await state.set_state(Play.bet_dice)
    await state.update_data(past_msg=callback.message)


@dice_router.callback_query(F.data.split()[0] == 'play_dice')
async def play_dice_handler(callback: CallbackQuery, state: FSMContext):
    bet = int(callback.data.split()[1])
    await handle_playing(callback, state, bet)


@dice_router.message(Play.bet_dice)
async def bet_dice_message(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.delete()
    if not message.text.isdigit():
        text = '''‚ùå –í–≤–µ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        
‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:'''
        await edit_message(data.get('past_msg'), text, reply_markup=await back_btn('dice'))
    bet = int(message.text)
    await handle_playing(message, state, bet)


async def handle_playing(event: CallbackQuery | Message, state: FSMContext, bet: int):
    data = await state.get_data()
    user: Users = Users.get_or_none(Users.user_id == event.from_user.id)
    if not user:
        return await edit_message(data.get('past_msg', event), '‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ /start')
    if (not bet and not user.free_balance) or (bet and user.balance < bet):
        return await edit_message(data.get('past_msg', event), '‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å',
                                  reply_markup=await back_btn('dice'))
    text = f'üé≤ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet}‚ÇΩ\n‚ÑπÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ' if bet else '‚ÑπÔ∏è –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω'
    await edit_message(data.get('past_msg', event), text)
    await state.clear()
    if isinstance(event, CallbackQuery):
        a = await event.message.answer_dice()
        b = await event.message.answer_dice()
    else:
        a = await event.answer_dice()
        b = await event.answer_dice()
    if not bet:
        user.free_balance -= 1
    else:
        user.balance -= bet
    await asyncio.sleep(3)
    text = ''
    if a.dice.value == b.dice.value:
        await send_emoji_win(event, a.dice.value)
        if not bet:
            if a.dice.value == 1:
                win_sum = 500 * 10
            else:
                win_sum = 500 * a.dice.value
            text += f'\n–ï—Å–ª–∏ –±—ã —Ç—ã –ø–æ—Å—Ç–∞–≤–∏–ª 500 RUB, —Ç—ã –±—ã –≤—ã–∏–≥—Ä–∞–ª {win_sum} RUB'
        else:
            if a.dice.value == 1:
                win_sum = bet * 10
            else:
                win_sum = bet * a.dice.value
            user.balance += win_sum
            text += await win_text(bet, win_sum)
    else:
        text += await lose_text()
    user.save()
    if not bet:
        text += f'\n\n‚ÑπÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {user.free_balance}'
    else:
        text += f'\n\n‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ'
    message = event.message if isinstance(event, CallbackQuery) else event
    await message.answer(text, parse_mode="HTML")
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=await again_with_back(f'play_dice', bet, 'dice'))
